import { 
  collection, 
  doc, 
  getDoc, 
  setDoc, 
  updateDoc, 
  increment, 
  arrayUnion, 
  arrayRemove,
  query,
  where,
  getDocs,
  orderBy,
  limit,
  Timestamp,
  deleteDoc
} from 'firebase/firestore';
import { db } from '@/firebaseConfig';

// Types
interface HashtagData {
  id: string;
  tag: string;
  count: number;
  posts: string[];
  users: string[];
  createdAt: Timestamp;
  lastUsed: Timestamp;
}

interface PostData {
  id: string;
  content: string;
  hashtags: string[];
  timestamp: Timestamp;
  userID: string;
  username: string;
}

// Hashtags ph·ªï bi·∫øn cho ·ª©ng d·ª•ng h·∫πn h√≤
export const POPULAR_HASHTAGS = [
  '#SingleLife', '#Dating', '#LookingForLove', '#Romance', '#Relationship',
  '#Coffee', '#Travel', '#Fitness', '#Music', '#Movies', '#Books', '#Art',
  '#Foodie', '#Adventure', '#Beach', '#Nature', '#Photography', '#Dance',
  '#Yoga', '#Gym', '#Running', '#Hiking', '#Cooking', '#Wine', '#Beer',
  '#Weekend', '#Friday', '#Saturday', '#Sunday', '#SelfCare', '#Happy',
  '#Smile', '#Fashion', '#Style', '#Cute', '#Handsome', '#Beautiful',
  '#Fun', '#Party', '#Concert', '#Festival', '#Friends', '#Family'
];

// Hashtags theo danh m·ª•c cho ·ª©ng d·ª•ng h·∫πn h√≤
export const HASHTAG_CATEGORIES = {
  interests: {
    title: 'S·ªü th√≠ch',
    tags: ['#Music', '#Movies', '#Books', '#Art', '#Photography', '#Dance', '#Gaming', '#Reading']
  },
  activities: {
    title: 'Ho·∫°t ƒë·ªông',
    tags: ['#Travel', '#Fitness', '#Yoga', '#Gym', '#Running', '#Hiking', '#Cooking', '#Shopping']
  },
  food: {
    title: '·∫®m th·ª±c',
    tags: ['#Foodie', '#Coffee', '#Wine', '#Beer', '#Pizza', '#Sushi', '#Dessert', '#BBQ']
  },
  lifestyle: {
    title: 'L·ªëi s·ªëng',
    tags: ['#SingleLife', '#Weekend', '#SelfCare', '#Happy', '#Adventure', '#Chill', '#Party', '#Fashion']
  },
  dating: {
    title: 'H·∫πn h√≤',
    tags: ['#Dating', '#LookingForLove', '#Romance', '#Relationship', '#FirstDate', '#Dinner', '#MovieNight', '#Walk']
  },
  mood: {
    title: 'T√¢m tr·∫°ng',
    tags: ['#Happy', '#Excited', '#Relaxed', '#Motivated', '#Grateful', '#Blessed', '#Peaceful', '#Energetic']
  }
};

// H√†m c·∫£i thi·ªán ƒë·ªÉ t√°ch hashtag
export const extractHashtags = (text: string): string[] => {
  if (!text) return [];
  
  // Regex c·∫£i thi·ªán ƒë·ªÉ h·ªó tr·ª£ Unicode v√† ti·∫øng Vi·ªát
  const regex = /#[\w\u00C0-\u024F\u1E00-\u1EFF]+/g;
  const hashtags = text.match(regex) || [];
  
  // Lo·∫°i b·ªè tr√πng l·∫∑p v√† chuy·ªÉn v·ªÅ lowercase ƒë·ªÉ so s√°nh
  const uniqueHashtags = [...new Set(hashtags.map((tag: string) => tag.toLowerCase()))];
  
  return uniqueHashtags;
};

// H√†m suggest hashtag d·ª±a tr√™n n·ªôi dung
export const suggestHashtags = (content: string): string[] => {
  if (!content) return [];
  
  const suggestions: string[] = [];
  const lowerContent = content.toLowerCase();
  
  // Mapping t·ª´ kh√≥a v·ªõi hashtag
  const keywordMapping = {
    'c√† ph√™': '#Coffee',
    'coffee': '#Coffee',
    'du l·ªãch': '#Travel',
    'travel': '#Travel',
    'gym': '#Gym',
    'fitness': '#Fitness',
    'yoga': '#Yoga',
    'ƒÉn': '#Foodie',
    'food': '#Foodie',
    '√¢m nh·∫°c': '#Music',
    'music': '#Music',
    'phim': '#Movies',
    'movie': '#Movies',
    's√°ch': '#Books',
    'book': '#Books',
    'h·∫°nh ph√∫c': '#Happy',
    'happy': '#Happy',
    'vui': '#Happy',
    'weekend': '#Weekend',
    'cu·ªëi tu·∫ßn': '#Weekend',
    'h·∫πn h√≤': '#Dating',
    'dating': '#Dating',
    'y√™u': '#Love',
    'love': '#Love',
    'single': '#SingleLife',
    'ƒë·ªôc th√¢n': '#SingleLife'
  };
  
  Object.entries(keywordMapping).forEach(([keyword, hashtag]) => {
    if (lowerContent.includes(keyword) && !suggestions.includes(hashtag)) {
      suggestions.push(hashtag);
    }
  });
  
  return suggestions.slice(0, 5); // Gi·ªõi h·∫°n 5 suggestions
};

// C·∫≠p nh·∫≠t ho·∫∑c t·∫°o hashtag document
export const updateHashtagStats = async (hashtags: string[], postId: string, userId: string): Promise<void> => {
  try {
    for (const hashtag of hashtags) {
      const tagDocRef = doc(db, 'hashtags', hashtag.toLowerCase());
      const tagDocSnap = await getDoc(tagDocRef);
      
      if (tagDocSnap.exists()) {
        await updateDoc(tagDocRef, {
          count: increment(1),
          posts: arrayUnion(postId),
          lastUsed: Timestamp.now(),
          users: arrayUnion(userId)
        });
      } else {
        await setDoc(tagDocRef, {
          tag: hashtag,
          count: 1,
          posts: [postId],
          users: [userId],
          createdAt: Timestamp.now(),
          lastUsed: Timestamp.now()
        });
      }
    }
  } catch (error) {
    console.error('Error updating hashtag stats:', error);
  }
};

// X√≥a hashtag kh·ªèi stats khi x√≥a post
export const removeHashtagStats = async (hashtags: string[], postId: string, userId: string): Promise<void> => {
  try {
    for (const hashtag of hashtags) {
      const tagDocRef = doc(db, 'hashtags', hashtag.toLowerCase());
      const tagDocSnap = await getDoc(tagDocRef);
      
      if (tagDocSnap.exists()) {
        const data = tagDocSnap.data();
        const newCount = Math.max(0, data.count - 1);
        
        if (newCount === 0) {
          // X√≥a document n·∫øu kh√¥ng c√≤n ai s·ª≠ d·ª•ng
          await deleteDoc(tagDocRef);
        } else {
          await updateDoc(tagDocRef, {
            count: increment(-1),
            posts: arrayRemove(postId),
            users: arrayRemove(userId)
          });
        }
      }
    }
  } catch (error) {
    console.error('Error removing hashtag stats:', error);
  }
};

// L·∫•y hashtags trending
export const getTrendingHashtags = async (limitCount: number = 20): Promise<HashtagData[]> => {
  try {
    const hashtagsRef = collection(db, 'hashtags');
    // S·ª≠ d·ª•ng single field order ƒë·ªÉ tr√°nh composite index
    const q = query(
      hashtagsRef,
      orderBy('count', 'desc'),
      limit(limitCount)
    );
    
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as HashtagData));
  } catch (error) {
    console.error('Error getting trending hashtags:', error);
    return [];
  }
};

// T√¨m ki·∫øm hashtags
export const searchHashtags = async (searchTerm: string, limitCount: number = 10): Promise<HashtagData[]> => {
  try {
    if (!searchTerm) return [];
    
    const hashtagsRef = collection(db, 'hashtags');
    // S·ª≠ d·ª•ng single field query ƒë·ªÉ tr√°nh composite index
    const q = query(
      hashtagsRef,
      where('tag', '>=', searchTerm.toLowerCase()),
      where('tag', '<=', searchTerm.toLowerCase() + '\uf8ff'),
      limit(limitCount * 2) // L·∫•y nhi·ªÅu h∆°n ƒë·ªÉ c√≥ th·ªÉ sort
    );
    
    const querySnapshot = await getDocs(q);
    const hashtags = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as HashtagData));
    
    // Sort manually by count v√† limit
    return hashtags
      .sort((a, b) => b.count - a.count)
      .slice(0, limitCount);
      
  } catch (error) {
    console.error('Error searching hashtags:', error);
    return [];
  }
};

// L·∫•y posts theo hashtag
export const getPostsByHashtag = async (hashtag: string, limitCount: number = 20): Promise<PostData[]> => {
  try {
    console.log('üîç getPostsByHashtag called with:', hashtag);
    
    const postsRef = collection(db, 'posts');
    
    // Th·ª≠ t√¨m ki·∫øm v·ªõi nhi·ªÅu format kh√°c nhau
    const searchFormats = [
      hashtag, // Nguy√™n b·∫£n
      hashtag.toLowerCase(), // Lowercase
      hashtag.startsWith('#') ? hashtag : `#${hashtag}`, // V·ªõi #
      hashtag.startsWith('#') ? hashtag.toLowerCase() : `#${hashtag.toLowerCase()}` // V·ªõi # v√† lowercase
    ];
    
    console.log('üîç Searching with formats:', searchFormats);
    
    let allPosts: PostData[] = [];
    
    // T√¨m ki·∫øm v·ªõi t·ª´ng format
    for (const format of searchFormats) {
      console.log('üîç Searching for hashtag format:', format);
      const q = query(
        postsRef,
        where('hashtags', 'array-contains', format),
        limit(limitCount * 2)
      );
      
      const querySnapshot = await getDocs(q);
      const posts = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as PostData));
      
      console.log(`üîç Found ${posts.length} posts for format "${format}"`);
      allPosts = [...allPosts, ...posts];
    }
    
    // Lo·∫°i b·ªè tr√πng l·∫∑p
    const uniquePosts = allPosts.filter((post, index, self) => 
      index === self.findIndex(p => p.id === post.id)
    );
    
    console.log('üîç Total unique posts found:', uniquePosts.length);
    
    // Sort manually by timestamp v√† limit
    const sortedPosts = uniquePosts
      .sort((a, b) => {
        const timeA = a.timestamp?.toDate?.() || (a.timestamp instanceof Date ? a.timestamp : new Date());
        const timeB = b.timestamp?.toDate?.() || (b.timestamp instanceof Date ? b.timestamp : new Date());
        return timeB.getTime() - timeA.getTime();
      })
      .slice(0, limitCount);
      
    console.log('üîç Returning sorted posts:', sortedPosts.length);
    return sortedPosts;
      
  } catch (error) {
    console.error('üîç Error getting posts by hashtag:', error);
    return [];
  }
};

// Validate hashtag
export const validateHashtag = (hashtag: string): boolean => {
  if (!hashtag || typeof hashtag !== 'string') return false;
  
  // B·∫Øt ƒë·∫ßu b·∫±ng # v√† c√≥ √≠t nh·∫•t 1 k√Ω t·ª±
  const regex = /^#[\w\u00C0-\u024F\u1E00-\u1EFF]+$/;
  return regex.test(hashtag) && hashtag.length >= 2 && hashtag.length <= 30;
};

// Format hashtag
export const formatHashtag = (text: string): string => {
  if (!text) return '';
  
  let formatted = text.trim();
  if (!formatted.startsWith('#')) {
    formatted = '#' + formatted;
  }
  
  // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
  formatted = formatted.replace(/[^\w\u00C0-\u024F\u1E00-\u1EFF#]/g, '');
  
  return formatted;
};
